# hvisor Github Actions CI
# wheatfox <wheatfox17@icloud.com>
#
# 此工作流已更新为使用预构建的 Docker 容器，该容器包含了所有必需的依赖项和工具链。
# 这通过消除重复的设置步骤，显著加快了 CI 流程。

name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  MODE: debug
  #
  # ============================== 重要 ==============================
  # 请将下面的路径替换为您在容器仓库中的 CI 镜像路径。
  #
  # - 对于 GitHub Container Registry (GHCR)，格式为: ghcr.io/您的GitHub用户名/您的仓库名:标签
  #   示例: ghcr.io/wheatfox/hvisor:ci-latest
  #
  # - 对于 Docker Hub，格式为: 您的DockerHub用户名/您的镜像名:标签
  #   示例: wheatfox/hvisor-ci:latest
  #
  CI_IMAGE: ghcr.io/jaxtonmax/hvisor-ci:wzm # <-- 请务必替换此行为您自己的镜像路径!

jobs:
  linter:
    name: linter
    runs-on: ubuntu-latest
    # 在预构建的 Docker 容器中运行所有步骤
    container: ghcr.io/jaxtonmax/hvisor-ci:wzm
    steps:
      # 代码被检出到容器的工作区中
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 所有依赖项（Rust, QEMU 等）都已在容器中，不再需要安装步骤。

      - name: Format Check
        run: make fmt-test

  unittest:
    name: unittest
    runs-on: ubuntu-latest
    # 在预构建的 Docker 容器中运行所有步骤
    container: ghcr.io/jaxtonmax/hvisor-ci:wzm
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            board: "qemu-gicv3"
          - arch: aarch64
            board: "qemu-gicv2"
          - arch: riscv64
            board: "qemu-plic"
          - arch: riscv64
            board: "qemu-aia"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 所有依赖项都已在容器中，不再需要安装步骤。

      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV
      - name: Unit Test
        run: make test

  build:
    name: build
    runs-on: ubuntu-latest
    # 在预构建的 Docker 容器中运行所有步骤
    container: ghcr.io/jaxtonmax/hvisor-ci:wzm
    strategy:
      fail-fast: false
      matrix:
        include:
          # aarch64
          - arch: aarch64
            board: "qemu-gicv3"
          - arch: aarch64
            board: "qemu-gicv2"
          - arch: aarch64
            board: "zcu102"
          - arch: aarch64
            board: "imx8mp"
          - arch: aarch64
            board: "rk3568"
          - arch: aarch64
            board: "rk3588"
          - arch: aarch64
            board: "ok6254-c"
          # riscv64
          - arch: riscv64
            board: "qemu-aia"
          - arch: riscv64
            board: "qemu-plic"
          # loongarch64
          - arch: loongarch64
            board: "ls3a5000"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 所有依赖项，包括LoongArch工具链，都已在容器中，不再需要安装步骤。

      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV
      - name: Build
        run: make

  systemtest:
    name: systemtest
    # 建议 runs-on 的系统与容器基础镜像保持一致，以获得最佳兼容性
    runs-on: ubuntu-22.04
    # 在预构建的 Docker 容器中运行所有步骤
    container: ghcr.io/jaxtonmax/hvisor-ci:wzm
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            board: "qemu-gicv3"
          - arch: riscv64
            board: "qemu-plic"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 所有工具链（Rust, QEMU, ARM GCC, RISCV GCC）都已预装在容器中，不再需要安装步骤。

      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV
      - name: Run System Test
        run: make stest

  # 此作业很轻量，不需要大型自定义CI镜像。
  # 在标准运行器上运行它更高效。
  license-checker:
    name: license-checker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: License Check
        run: |
          set -x
          ./tools/license_checker.sh