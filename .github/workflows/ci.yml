# hvisor Github Actions CI
# wheatfox <wheatfox17@icloud.com>
#
# 此工作流已更新为使用预构建的 Docker 容器，并修复了在 GitHub Actions 环境中的网络问题。

name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  MODE: debug
  #
  # ============================== 重要 ==============================
  # 请将下面的路径替换为您在容器仓库中的 CI 镜像路径。
  #
  CI_IMAGE: ghcr.io/wheatfox/hvisor:ci-latest # <-- 请务必替换此行为您自己的镜像路径!

jobs:
  linter:
    name: linter
    runs-on: ubuntu-latest
    container: ghcr.io/jaxtonmax/hvisor-ci:wzm
    # === FIX: 覆盖容器内的环境变量以使用官方 Rust 源 ===
    # 解决从 GitHub Actions Runner 访问国内镜像超时的问题。
    env:
      RUSTUP_DIST_SERVER: "https://static.rust-lang.org"
      RUSTUP_UPDATE_ROOT: "https://static.rust-lang.org/rustup"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # === FIX: 禁用 rustup 自动更新以增加稳定性 ===
      - name: Disable rustup auto update
        run: rustup set auto-self-update disable

      - name: Format Check
        run: make fmt-test

  unittest:
    name: unittest
    runs-on: ubuntu-latest
    container: ghcr.io/jaxtonmax/hvisor-ci:wzm
    # === FIX: 覆盖容器内的环境变量以使用官方 Rust 源 ===
    env:
      RUSTUP_DIST_SERVER: "https://static.rust-lang.org"
      RUSTUP_UPDATE_ROOT: "https://static.rust-lang.org/rustup"
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            board: "qemu-gicv3"
          - arch: aarch64
            board: "qemu-gicv2"
          - arch: riscv64
            board: "qemu-plic"
          - arch: riscv64
            board: "qemu-aia"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # === FIX: 禁用 rustup 自动更新以增加稳定性 ===
      - name: Disable rustup auto update
        run: rustup set auto-self-update disable

      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV
      - name: Unit Test
        run: make test

  build:
    name: build
    runs-on: ubuntu-latest
    container: ghcr.io/jaxtonmax/hvisor-ci:wzm
    # === FIX: 覆盖容器内的环境变量以使用官方 Rust 源 ===
    env:
      RUSTUP_DIST_SERVER: "https://static.rust-lang.org"
      RUSTUP_UPDATE_ROOT: "https://static.rust-lang.org/rustup"
    strategy:
      fail-fast: false
      matrix:
        include:
          # aarch64
          - arch: aarch64
            board: "qemu-gicv3"
          - arch: aarch64
            board: "qemu-gicv2"
          - arch: aarch64
            board: "zcu102"
          - arch: aarch64
            board: "imx8mp"
          - arch: aarch64
            board: "rk3568"
          - arch: aarch64
            board: "rk3588"
          - arch: aarch64
            board: "ok6254-c"
          # riscv64
          - arch: riscv64
            board: "qemu-aia"
          - arch: riscv64
            board: "qemu-plic"
          # loongarch64
          - arch: loongarch64
            board: "ls3a5000"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # === FIX: 禁用 rustup 自动更新以增加稳定性 ===
      - name: Disable rustup auto update
        run: rustup set auto-self-update disable

      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV
      - name: Build
        run: make

  systemtest:
    name: systemtest
    runs-on: ubuntu-22.04
    container: 
      image: ghcr.io/jaxtonmax/hvisor-ci:wzm
      options: --cap-add=SYS_ADMIN --privileged
    # === FIX: 覆盖容器内的环境变量以使用官方 Rust 源 ===
    env:
      RUSTUP_DIST_SERVER: "https://static.rust-lang.org"
      RUSTUP_UPDATE_ROOT: "https://static.rust-lang.org/rustup"
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            board: "qemu-gicv3"
          - arch: riscv64
            board: "qemu-plic"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # === FIX: 禁用 rustup 自动更新以增加稳定性 ===
      - name: Disable rustup auto update
        run: rustup set auto-self-update disable

      - name: Set up environment variables
        run: |
          echo "ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.board }}" >> $GITHUB_ENV

      - name: Install Cross-Compile Development Libraries
        run: |
          echo "### Installing cross-compile libraries for ${{ matrix.arch }} ###"
          sudo apt-get update
          if [ "${{ matrix.arch }}" == "aarch64" ]; then
            sudo apt-get install -y libc6-dev-arm64-cross;
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [ "${{ matrix.arch }}" == "riscv64" ]; then
            # RISC-V 对应的包名是 libc6-dev-riscv64-cross
            sudo apt-get install -y libc6-dev-riscv64-cross;
            sudo apt-get install -y gcc-riscv64-linux-gnu
          fi

      - name: Check aarch64-none-linux-gnu-gcc version
        run: |
          aarch64-none-linux-gnu-gcc --version
          aarch64-linux-gnu-gcc --version
      # === 新增步骤: 检查交叉编译器的 Sysroot 目录是否存在 ===
      # 这个步骤用于验证我们的诊断，它会列出目标架构的头文件和库目录。
      # === 步骤 2: 验证 Sysroot 目录是否存在 (可选但推荐) ===
      - name: Verify Sysroot Directories Exist
        run: |
          echo "### Verifying Sysroot for ${{ matrix.arch }} ###"
          # === FIX: 使用 = 进行字符串比较，以保证 Shell 脚本的可移植性 ===
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            SYSROOT_PATH="/usr/aarch64-linux-gnu"
          elif [ "${{ matrix.arch }}" = "riscv64" ]; then
            SYSROOT_PATH="/usr/riscv64-linux-gnu"
          fi
          echo "--- Checking main sysroot directory: ${SYSROOT_PATH} ---"
          ls -la "${SYSROOT_PATH}"

      - name: Patch Cross-Compile Command with Correct Sysroot
        run: |
          # === FIX: 使用 = 进行字符串比较，以保证 Shell 脚本的可移植性 ===
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            SYSROOT_PATH="/usr/aarch64-linux-gnu"
            MAKE_SEARCH="make all ARCH=arm64"
            MAKE_REPLACE="make all ARCH=arm64 CFLAGS='--sysroot=${SYSROOT_PATH}'"
          elif [ "${{ matrix.arch }}" = "riscv64" ]; then
            SYSROOT_PATH="/usr/riscv64-linux-gnu"
            MAKE_SEARCH="make all ARCH=riscv64"
            MAKE_REPLACE="make all ARCH=riscv64 CFLAGS='--sysroot=${SYSROOT_PATH}'"
          else
            echo "Unsupported architecture for patching: ${{ matrix.arch }}"
            exit 1
          fi
          SCRIPT_PATH="platform/${{ matrix.arch }}/${{ matrix.board }}/test/systemtest/trootfs_deploy.sh"
          if [ -f "$SCRIPT_PATH" ]; then
            echo "Patching '$SCRIPT_PATH' to add correct sysroot for cross-compilation..."
            sed -i "s|${MAKE_SEARCH}|${MAKE_REPLACE}|g" "$SCRIPT_PATH"
            echo "Patch applied successfully. Patched content:"
            grep --color=always "${MAKE_REPLACE}" "$SCRIPT_PATH"
          else
            echo "Warning: Build script $SCRIPT_PATH not found. Skipping patch."
          fi


      - name: Run System Test
        run: make stest

  # 此作业很轻量，保持不变
  license-checker:
    name: license-checker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: License Check
        run: |
          set -x
          ./tools/license_checker.sh